<div
  class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom"
>
  <h1>Creación de juegos</h1>
</div>
<form action="/game/create" method="POST">
  <div class="row g-3 mb-4">
    <div class="col-sm-4 d-flex flex-column gap-3">
      <div class="w-100">
        <label for="name" class="form-label">Nombre del juego</label>
        <input
          type="text"
          class="form-control"
          id="name"
          placeholder=""
          required
          name="name"
        />
      </div>
      <div class="w-100">
        <label for="centerLat" class="form-label"
          >Latitud (Centro del área)</label
        >
        <input
          type="number"
          class="form-control"
          id="centerLat"
          placeholder=""
          required
          name="centerLat"
          step="0.000001"
        />
      </div>
      <div class="w-100">
        <label for="centerLng" class="form-label"
          >Longitud (Centro del área)</label
        >
        <input
          type="number"
          class="form-control"
          id="centerLng"
          placeholder=""
          required
          name="centerLng"
          step="0.000001"
        />
      </div>
      <div class="w-100">
        <label for="width" class="form-label">Anchura del área (metros)</label>
        <input
          type="number"
          class="form-control"
          id="width"
          placeholder=""
          required
          name="width"
        />
      </div>
      <div class="w-100">
        <label for="height" class="form-label">Altura del área (metros)</label>
        <input
          type="number"
          class="form-control"
          id="height"
          placeholder=""
          required
          name="height"
        />
      </div>
      <button type="button" onclick="setArea()" class="btn btn-outline-primary">
        Establecer área
      </button>
      <div id="cacheSection" style="display: none">
        <div class="d-flex flex-column gap-2">
          <h2>Agregar caches</h2>
          <div>
            <label for="numCaches" class="form-label">Number of caches</label>
            <input
              class="form-control"
              type="number"
              id="numCaches"
              name="numCaches"
              value="0"
              required
            />
          </div>

          <div id="caches" class="d-flex flex-column gap-2">
            <!-- Add fields for cache locations and hints dynamically using JavaScript -->
          </div>

          <button class="btn btn-primary" type="submit">Crear juego</button>
        </div>
      </div>
    </div>
    <div class="col-sm-8">
      <div id="map" style="width: 100%; height: 90vh"></div>
    </div>
  </div>
</form>

<script>
  function initMap() {
    const map = new google.maps.Map(document.getElementById("map"), {
      center: { lat: 0, lng: 0 },
      zoom: 2,
      mapId: "<%= googleMapsId %>",
    });

    let marker;
    let rectangle;
    const caches = [];
    const cacheMarkers = [];

    map.addListener("click", (e) => {
      const position = {
        lat: parseFloat(e.latLng.lat().toFixed(6)),
        lng: parseFloat(e.latLng.lng().toFixed(6)),
      };

      if (marker) {
        marker.position = position;
      } else {
        marker = new google.maps.marker.AdvancedMarkerElement({
          position,
          map: map,
        });
      }

      // Actualizar los campos del formulario con las coordenadas seleccionadas
      document.getElementById("centerLat").value = position.lat;
      document.getElementById("centerLng").value = position.lng;
    });

    window.setArea = function () {
    // function setArea() {
      const centerLat = parseFloat(document.getElementById("centerLat").value);
      const centerLng = parseFloat(document.getElementById("centerLng").value);
      const width = parseFloat(document.getElementById("width").value);
      const height = parseFloat(document.getElementById("height").value);

      if (!centerLat || !centerLng || !width || !height) {
        alert("Please set the area center and dimensions.");
        return;
      }

      const bounds = {
        north: centerLat + (height / 111320 / 2),
        south: centerLat - (height / 111320 / 2),
        east: centerLng + (width / (111320 * Math.cos(centerLat * (Math.PI / 180))) / 2),
        west: centerLng - (width / (111320 * Math.cos(centerLat * (Math.PI / 180))) / 2),
      };

      if (rectangle) {
          rectangle.setMap(null);
      }

      rectangle = new google.maps.Rectangle({
        bounds: bounds,
        editable: false,
        draggable: false,
        clickable: false,
        strokeColor: '#0000FF', // Color del borde del rectángulo (azul)
        fillColor: '#ADD8E6', // Color de relleno del rectángulo (azul claro)
        fillOpacity: 0.35, // Opacidad del relleno
        map: map
      });

      map.fitBounds(bounds);

      document.getElementById("cacheSection").style.display = "block";

      // map.setCenter({ lat: centerLat, lng: centerLng });
      // map.setZoom(14);

      google.maps.event.clearListeners(map, "click");

      map.addListener("click", (e) => {
        const numCaches = parseInt(document.getElementById("numCaches").value);
        if (caches.length >= numCaches) {
          alert("You have reached the maximum number of caches.");
          return;
        }

        const position = {
          lat: parseFloat(e.latLng.lat().toFixed(6)),
          lng: parseFloat(e.latLng.lng().toFixed(6)),
        };

        if (
            position.lat > bounds.north ||
            position.lat < bounds.south ||
            position.lng > bounds.east ||
            position.lng < bounds.west
        ) {
            alert("El cache está fuera del área delimitada.");
            return;
          }

        const pinGreen = new google.maps.marker.PinElement({
          borderColor: "green",
          background: "green",
          glyphColor: "white",
        });

        const cacheMarker = new google.maps.marker.AdvancedMarkerElement({
          position,
          map: map,
          content: pinGreen.element,
        });

        cacheMarkers.push(cacheMarker);

        const cacheIndex = caches.length;
        caches.push({ position, hint: "" });

        const cacheElement = document.createElement("div");
        cacheElement.innerHTML = `
          <label class="form-label" for="cacheHint${cacheIndex}">Cache ${
          cacheIndex + 1
        } Hint:</label>
          <input class="form-control" type="text" id="cacheHint${cacheIndex}" name="caches[${cacheIndex}][hint]" required>
          <input type="hidden" name="caches[${cacheIndex}][lat]" value="${
          position.lat
        }">
          <input type="hidden" name="caches[${cacheIndex}][lng]" value="${
          position.lng
        }">
        `;
        document.getElementById("caches").appendChild(cacheElement);
      });
    };

    document
      .getElementById("numCaches")
      .addEventListener("change", function () {
        caches.length = 0; // Reset the caches array
        document.getElementById("caches").innerHTML = ""; // Clear the cache elements
        cacheMarkers.forEach((marker) => (marker.map = null)); // Remove cache markers from the map
        cacheMarkers.length = 0; // Reset the cache markers array
      });
  }

  // initMap();
</script>
